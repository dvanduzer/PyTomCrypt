
In several places in the library there are a number of function sets that have identical (or nearly so) signatures, but differ in the name, and the encryption or hashing mode they work under. For example, all of the encrypt/decrypt functions for all the cipher modes have exactly the same signature with the exception of the type of the state pointer.

There are several methods that we can take to dispatch to these various methods.

1. Save an int representing the current mode as an attribute on the cipher object. Then run through a series of (el)if statements checking against this int and calling the appropriate function. The (el)if block can be constructed very easily via mako, and Cython should turn it into a switch statement.
	- Takes about 300 ns per block.

2. Build a class for each of the modes. Every class is completely seperate and only uses the proper functions.
	- Takes about 292-294 ns per block.
	- This should severely increase compile times.

3. Reference all the functions with a void* state type, and save pointers to the en/decrypt functions in the Cipher class.
	- This relies upon the compiler automatically casting from void* to
	  whatever it should be (symetric_XXX*), although simple inline functions
	  could wrap these which do an explicit cast.
	- Takes about 295 ns per block.

4. Build array of pointer functions and store the index into that array in the class.
    - Same issue with the types as 3.
    - Takes about 305ns per block. I'm not sure if this timing is with or
      without the inline wrapper functions

	Compile times (via `make clean && make preprocess && time make build`):
		real	0m9.629s
		user	0m8.883s
		sys		0m0.423s
		
		real	0m9.296s
		user	0m8.870s
		sys		0m0.413s
		

5. (Not attempted.) Each mode gets it's own class, which inherit from a master class which handles all the common code, using pointers to methods. I think that this will require the descriptor to actually be a metaclass, which is somewhat problematic given that I don't think we can do that with Cython.

-----

Note that libtomcrypt is able to encrypt more than a single block at once,
passing the dispatching from Python to the C code, which is MUCH faster. Timings change drastically when you let the C code dispatch, as seen in this
example where we encrypt 65536 bytes of random text in different sized chunks.

	 1/4 blocks: 2009.04ns each
	 1/2 blocks: 1072.77ns each
	   1 blocks: 637.96ns each
	   2 blocks: 408.44ns each
	   4 blocks: 259.02ns each
	   8 blocks: 201.22ns each
	  16 blocks: 191.39ns each
	  32 blocks: 167.70ns each
	  64 blocks: 155.76ns each
	 128 blocks: 156.29ns each
	 256 blocks: 144.76ns each
	 512 blocks: 143.31ns each
	1024 blocks: 142.32ns each
	2048 blocks: 141.39ns each
	4096 blocks: 141.62ns each

As you can see, if we encrypt it all in one go then we are virtually only
limited by the raw speed of libtomcrypt, which processes one block of AES in CFB mode in 141ns. Back up to doing a single block at a time we are at approx 4 times that duration. Clearly, arguing about the various dispatch methods describes above for ~10ns per dispatch (not block) is rather trivial. Ergo we are no longer going to so highly prioritize dispatch speed.






